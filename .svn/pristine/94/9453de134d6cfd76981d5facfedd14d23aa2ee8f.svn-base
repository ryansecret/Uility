using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.OscarClient;
 

namespace Framework.DBUtility
{
    using System.Configuration;

    /// <summary>
    /// 数据访问基础类(基于OscarServer)	
    ///
    /// </summary>
    public class DbHelperOscar
    {

        //protected static readonly string connectionString = ConfigurationManager.ConnectionStrings["OscarConnectionString"].ConnectionString;
        public  static   string connectionString = string.Empty;

       
        #region 公用方法

        public static bool TestConnect(string connectStr)
        {
            using (OscarConnection oscarConnection = new OscarConnection(connectStr))
            {
                try
                {
                     
                    oscarConnection.Open();
                    return true;
                }
                catch (Exception)
                {
                    return false;
                    
                }
            }
            
        }

        public static int GetMaxID(string FieldName, string TableName)
        {
            string strsql = "select max(" + FieldName + ") from " + TableName;
            object obj = GetSingle(strsql);
            if (obj == null)
            {
                return 1;
            }
            return int.Parse(obj.ToString());
        }

        public static bool Exists(string strSql)
        {
            object obj = GetSingle(strSql);
            int cmdresult;
            if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
            {
                cmdresult = 0;
            }
            else
            {
                cmdresult = int.Parse(obj.ToString());
            }
            return cmdresult != 0;
        }

        /// <summary>
        /// 表是否存在
        /// </summary>
        /// <param name="TableName"></param>
        /// <returns></returns>
        public static bool TabExists(string TableName)
        {
            string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName +
                            "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";
            //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";
            object obj = GetSingle(strsql);
            int cmdresult;
            if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
            {
                cmdresult = 0;
            }
            else
            {
                cmdresult = int.Parse(obj.ToString());
            }
            if (cmdresult == 0)
            {
                return false;
            }
            return true;
        }

        public static bool Exists(string strSql, params OscarParameter[] cmdParms)
        {
            object obj = GetSingle(strSql, cmdParms);
            int cmdresult;
            if (Equals(obj, null) || Equals(obj, DBNull.Value))
            {
                cmdresult = 0;
            }
            else
            {
                cmdresult = int.Parse(obj.ToString());
            }
            if (cmdresult == 0)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region  执行简单SQL语句

        /// <summary>
        /// 执行SQL语句，返回影响的记录数
        /// </summary>
        /// <param name="SQLString">SQL语句</param>
        /// <returns>影响的记录数</returns>
        public static int ExecuteSql(string SQLString)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                using (OscarCommand cmd = new OscarCommand(SQLString, connection))
                {
                    connection.Open();

                    int rows = cmd.ExecuteNonQuery();
                    return rows;
                }
            }
        }

        public static int ExecuteSqlByTime(string SQLString, int Times)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                using (OscarCommand cmd = new OscarCommand(SQLString, connection))
                {
                    connection.Open();
                    cmd.CommandTimeout = Times;
                    int rows = cmd.ExecuteNonQuery();
                    return rows;
                }
            }
        }

       

        /// <summary>
        /// 执行多条SQL语句，实现数据库事务。
        /// </summary>
        /// <param name="SQLStringList">多条SQL语句</param>		
        public static int ExecuteSqlTran(List<String> SQLStringList)
        {
            using (OscarConnection conn = new OscarConnection(connectionString))
            {
                conn.Open();
                OscarCommand cmd = new OscarCommand
                                       {
                                           Connection = conn
                                       };
                OscarTransaction tx = conn.BeginTransaction();
                cmd.Transaction = tx;
                try
                {
                    int count = 0;
                    for (int n = 0; n < SQLStringList.Count; n++)
                    {
                        string strsql = SQLStringList[n];
                        if (strsql.Trim().Length > 1)
                        {
                            cmd.CommandText = strsql;
                            count += cmd.ExecuteNonQuery();
                        }
                    }
                    tx.Commit();
                    return count;
                }
                catch (Exception)
                {
                    tx.Rollback();
                    throw;
                     
                }
            }
        }

        /// <summary>
        /// 执行带一个存储过程参数的的SQL语句。
        /// </summary>
        /// <param name="SQLString">SQL语句</param>
        /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
        /// <returns>影响的记录数</returns>
        public static int ExecuteSql(string SQLString, string content)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                OscarCommand cmd = new OscarCommand(SQLString, connection);
                OscarParameter myParameter = new OscarParameter("@content", OscarDbType.Text);
                myParameter.Value = content;
                cmd.Parameters.Add(myParameter);
                try
                {
                    connection.Open();
                    int rows = cmd.ExecuteNonQuery();
                    return rows;
                }
                finally
                {
                    cmd.Dispose();
                    connection.Close();
                }
            }
        }

        /// <summary>
        /// 执行带一个存储过程参数的的SQL语句。
        /// </summary>
        /// <param name="SQLString">SQL语句</param>
        /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
        /// <returns>影响的记录数</returns>
        public static object ExecuteSqlGet(string SQLString, string content)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                OscarCommand cmd = new OscarCommand(SQLString, connection);
                OscarParameter myParameter = new OscarParameter("@content", OscarDbType.Text);
                myParameter.Value = content;
                cmd.Parameters.Add(myParameter);
                try
                {
                    connection.Open();
                    object obj = cmd.ExecuteScalar();
                    if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
                    {
                        return null;
                    }
                    else
                    {
                        return obj;
                    }
                }
                finally
                {
                    cmd.Dispose();
                    connection.Close();
                }
            }
        }

        /// <summary>
        /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
        /// </summary>
        /// <param name="strSQL">SQL语句</param>
        /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>
        /// <returns>影响的记录数</returns>
        public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                OscarCommand cmd = new OscarCommand(strSQL, connection);
                OscarParameter myParameter = new OscarParameter("@fs", OscarDbType.Binary);
                myParameter.Value = fs;
                cmd.Parameters.Add(myParameter);
                try
                {
                    connection.Open();
                    int rows = cmd.ExecuteNonQuery();
                    return rows;
                }
                finally
                {
                    cmd.Dispose();
                    connection.Close();
                }
            }
        }

        /// <summary>
        /// 执行一条计算查询结果语句，返回查询结果（object）。
        /// </summary>
        /// <param name="SQLString">计算查询结果语句</param>
        /// <returns>查询结果（object）</returns>
        public static object GetSingle(string SQLString)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                using (OscarCommand cmd = new OscarCommand(SQLString, connection))
                {
                    try
                    {
                        connection.Open();
                        object obj = cmd.ExecuteScalar();
                        if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
                        {
                            return null;
                        }
                        return obj;
                    }
                    catch (OscarException)
                    {
                        connection.Close();
                        throw;
                    }
                }
            }
        }

        public static object GetSingle(string SQLString, int Times)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                using (OscarCommand cmd = new OscarCommand(SQLString, connection))
                {
                    try
                    {
                        connection.Open();
                        cmd.CommandTimeout = Times;
                        object obj = cmd.ExecuteScalar();
                        if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
                        {
                            return null;
                        }
                        return obj;
                    }
                    catch (OscarException)
                    {
                        connection.Close();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// 执行查询语句，返回OscarDataReader ( 注意：调用该方法后，一定要对OscarDataReader进行Close )
        /// </summary>
        /// <param name="strSQL">查询语句</param>
        /// <returns>OscarDataReader</returns>
        public static OscarDataReader ExecuteReader(string strSQL)
        {
            OscarDataReader myReader;

            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                OscarCommand cmd = new OscarCommand(strSQL, connection);
                connection.Open();

                myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }

            return myReader;
        }

        /// <summary>
        /// 执行查询语句，返回DataSet
        /// </summary>
        /// <param name="SQLString">查询语句</param>
        /// <returns>DataSet</returns>
        public static DataSet Query(string SQLString)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                DataSet ds = new DataSet();
                try
                {
                    connection.Open();
                    OscarDataAdapter command = new OscarDataAdapter(SQLString, connection);
                    command.Fill(ds, "ds");
                }
                catch (OscarException ex)
                {
                    throw ex;
                }

                catch (Exception ex)
                {
                    throw ex;
                }
                return ds;
            }
        }
        
        //public static DataSet Query(string SQLString, int Times)
        //{
        //    using (OscarConnection connection = new OscarConnection(connectionString))
        //    {
        //        DataSet ds = new DataSet();
        //        try
        //        {
        //            connection.Open();
        //            OscarDataAdapter command = new OscarDataAdapter(SQLString, connection);
        //            command.SelectCommand.CommandTimeout = Times;
        //            command.Fill(ds, "ds");
        //        }
        //        catch (OscarException ex)
        //        {
        //            throw new Exception(ex.Message);
        //        }
        //        return ds;
        //    }
        //}

        #endregion

        #region 执行带参数的SQL语句

        /// <summary>
        /// 执行SQL语句，返回影响的记录数
        /// </summary>
        /// <param name="SQLString">SQL语句</param>
        /// <returns>影响的记录数</returns>
        public static int ExecuteSql(string SQLString, params OscarParameter[] cmdParms)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                using (OscarCommand cmd = new OscarCommand())
                {
                    try
                    {
                        PrepareCommand(cmd, connection, null, SQLString, cmdParms);
                        int rows = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                        return rows;
                    }
                    catch (OscarException e)
                    {
                        throw e;
                    }
                }
            }
        }

        /// <summary>
        /// 执行SQL语句，返回影响的记录数
        /// </summary>
        /// <param name="conn"></param>
        /// <param name="trans"></param>
        /// <param name="SQLString">SQL语句</param>
        /// <param name="cmdParms"></param>
        /// <returns>影响的记录数</returns>
        public static int ExecuteSql(OscarConnection conn, OscarTransaction trans, string SQLString,
                                     params OscarParameter[] cmdParms)
        {
            using (OscarCommand cmd = new OscarCommand())
            {
                try
                {
                    PrepareCommand(cmd, conn, trans, SQLString, cmdParms);
                    int rows = cmd.ExecuteNonQuery();
                    cmd.Parameters.Clear();
                    return rows;
                }
                catch (OscarException e)
                {
                    throw e;
                }
            }
        }

        /// <summary>
        /// 执行多条SQL语句，实现数据库事务。
        /// </summary>
        /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OscarParameter[]）</param>
        public static void ExecuteSqlTran(Hashtable SQLStringList)
        {
            using (OscarConnection conn = new OscarConnection(connectionString))
            {
                conn.Open();
                using (OscarTransaction trans = conn.BeginTransaction())
                {
                    OscarCommand cmd = new OscarCommand();
                    try
                    {
                        //循环
                        foreach (DictionaryEntry myDE in SQLStringList)
                        {
                            string cmdText = myDE.Key.ToString();
                            OscarParameter[] cmdParms = (OscarParameter[]) myDE.Value;
                            PrepareCommand(cmd, conn, trans, cmdText, cmdParms);
                            int val = cmd.ExecuteNonQuery();
                            cmd.Parameters.Clear();
                        }
                        trans.Commit();
                    }
                    catch
                    {
                        trans.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// 执行多条SQL语句，实现数据库事务。
        /// </summary>
        /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OscarParameter[]）</param>
        public static int ExecuteSqlTran(List<CommandInfo> cmdList)
        {
            using (OscarConnection conn = new OscarConnection(connectionString))
            {
                conn.Open();
                using (OscarTransaction trans = conn.BeginTransaction())
                {
                    OscarCommand cmd = new OscarCommand();
                    try
                    {
                        int count = 0;
                        //循环
                        foreach (CommandInfo myDE in cmdList)
                        {
                            string cmdText = myDE.CommandText;
                            OscarParameter[] cmdParms = (OscarParameter[]) myDE.Parameters;
                            PrepareCommand(cmd, conn, trans, cmdText, cmdParms);

                            if (myDE.EffentNextType == EffentNextType.WhenHaveContine ||
                                myDE.EffentNextType == EffentNextType.WhenNoHaveContine)
                            {
                                if (myDE.CommandText.ToLower().IndexOf("count(") == -1)
                                {
                                    trans.Rollback();
                                    return 0;
                                }

                                object obj = cmd.ExecuteScalar();
                                bool isHave = false;
                                if (obj == null && obj == DBNull.Value)
                                {
                                    isHave = false;
                                }
                                isHave = Convert.ToInt32(obj) > 0;

                                if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)
                                {
                                    trans.Rollback();
                                    return 0;
                                }
                                if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)
                                {
                                    trans.Rollback();
                                    return 0;
                                }
                                continue;
                            }
                            int val = cmd.ExecuteNonQuery();
                            count += val;
                            if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)
                            {
                                trans.Rollback();
                                return 0;
                            }
                            cmd.Parameters.Clear();
                        }
                        trans.Commit();
                        return count;
                    }
                    catch
                    {
                        trans.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// 执行多条SQL语句，实现数据库事务。
        /// </summary>
        /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OscarParameter[]）</param>
        public static void ExecuteSqlTranWithIndentity(List<CommandInfo> SQLStringList)
        {
            using (OscarConnection conn = new OscarConnection(connectionString))
            {
                conn.Open();
                using (OscarTransaction trans = conn.BeginTransaction())
                {
                    OscarCommand cmd = new OscarCommand();
                    try
                    {
                        int indentity = 0;
                        //循环
                        foreach (CommandInfo myDE in SQLStringList)
                        {
                            string cmdText = myDE.CommandText;
                            OscarParameter[] cmdParms = (OscarParameter[]) myDE.Parameters;
                            foreach (OscarParameter q in cmdParms)
                            {
                                if (q.Direction == ParameterDirection.InputOutput)
                                {
                                    q.Value = indentity;
                                }
                            }
                            PrepareCommand(cmd, conn, trans, cmdText, cmdParms);
                            int val = cmd.ExecuteNonQuery();
                            foreach (OscarParameter q in cmdParms)
                            {
                                if (q.Direction == ParameterDirection.Output)
                                {
                                    indentity = Convert.ToInt32(q.Value);
                                }
                            }
                            cmd.Parameters.Clear();
                        }
                        trans.Commit();
                    }
                    catch
                    {
                        trans.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// 执行多条SQL语句，实现数据库事务。
        /// </summary>
        /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OscarParameter[]）</param>
        public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)
        {
            using (OscarConnection conn = new OscarConnection(connectionString))
            {
                conn.Open();
                using (OscarTransaction trans = conn.BeginTransaction())
                {
                    OscarCommand cmd = new OscarCommand();
                    try
                    {
                        int indentity = 0;
                        //循环
                        foreach (DictionaryEntry myDE in SQLStringList)
                        {
                            string cmdText = myDE.Key.ToString();
                            OscarParameter[] cmdParms = (OscarParameter[]) myDE.Value;
                            foreach (OscarParameter q in cmdParms)
                            {
                                if (q.Direction == ParameterDirection.InputOutput)
                                {
                                    q.Value = indentity;
                                }
                            }
                            PrepareCommand(cmd, conn, trans, cmdText, cmdParms);
                            int val = cmd.ExecuteNonQuery();
                            foreach (OscarParameter q in cmdParms)
                            {
                                if (q.Direction == ParameterDirection.Output)
                                {
                                    indentity = Convert.ToInt32(q.Value);
                                }
                            }
                            cmd.Parameters.Clear();
                        }
                        trans.Commit();
                    }
                    catch
                    {
                        trans.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// 执行一条计算查询结果语句，返回查询结果（object）。
        /// </summary>
        /// <param name="SQLString">计算查询结果语句</param>
        /// <returns>查询结果（object）</returns>
        public static object GetSingle(string SQLString, params OscarParameter[] cmdParms)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                using (OscarCommand cmd = new OscarCommand())
                {
                    try
                    {
                        PrepareCommand(cmd, connection, null, SQLString, cmdParms);
                        object obj = cmd.ExecuteScalar();
                        cmd.Parameters.Clear();
                        if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
                        {
                            return null;
                        }
                        else
                        {
                            return obj;
                        }
                    }
                    catch (OscarException e)
                    {
                        throw e;
                    }
                }
            }
        }

        /// <summary>
        /// 执行查询语句，返回OscarDataReader ( 注意：调用该方法后，一定要对OscarDataReader进行Close )
        /// </summary>
        /// <param name="strSQL">查询语句</param>
        /// <returns>OscarDataReader</returns>
        public static OscarDataReader ExecuteReader(string SQLString, params OscarParameter[] cmdParms)
        {
            OscarConnection connection = new OscarConnection(connectionString);
            OscarCommand cmd = new OscarCommand();
            try
            {
                PrepareCommand(cmd, connection, null, SQLString, cmdParms);
                OscarDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                cmd.Parameters.Clear();
                return myReader;
            }
            catch (OscarException e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 执行查询语句，返回DataSet
        /// </summary>
        /// <param name="SQLString">查询语句</param>
        /// <param name="cmdParms"></param>
        /// <returns>DataSet</returns>
        public static DataSet Query(string SQLString, params OscarParameter[] cmdParms)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                OscarCommand cmd = new OscarCommand();
                PrepareCommand(cmd, connection, null, SQLString, cmdParms);
                using (OscarDataAdapter da = new OscarDataAdapter(cmd))
                {
                    DataSet ds = new DataSet();
                    try
                    {
                        da.Fill(ds, "ds");
                        cmd.Parameters.Clear();
                    }
                    catch (OscarException ex)
                    {
                        throw new Exception(ex.Message);
                    }
                    return ds;
                }
            }
        }

        private static void PrepareCommand(OscarCommand cmd, OscarConnection conn, OscarTransaction trans,
                                           string cmdText, OscarParameter[] cmdParms)
        {
            if (conn.State != ConnectionState.Open)
            {
                conn.Open();
            }
            cmd.Connection = conn;
            cmd.CommandText = cmdText;
            if (trans != null)
            {
                cmd.Transaction = trans;
            }
            cmd.CommandType = CommandType.Text; //cmdType;
            if (cmdParms != null)
            {
                foreach (OscarParameter parameter in cmdParms)
                {
                    if ((parameter.Direction == ParameterDirection.InputOutput ||
                         parameter.Direction == ParameterDirection.Input) &&
                        (parameter.Value == null))
                    {
                        parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(parameter);
                }
            }
        }

        #endregion

        #region 存储过程操作

        /// <summary>
        /// 执行存储过程，返回OscarDataReader ( 注意：调用该方法后，一定要对OscarDataReader进行Close )
        /// </summary>
        /// <param name="storedProcName">存储过程名</param>
        /// <param name="parameters">存储过程参数</param>
        /// <returns>OscarDataReader</returns>
        public static OscarDataReader RunProcedure(string storedProcName, IDataParameter[] parameters)
        {
            OscarDataReader returnReader;
            OscarCommand command;
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                connection.Open();
                command = BuildQueryCommand(connection, storedProcName, parameters);
            }
            command.CommandType = CommandType.StoredProcedure;
            returnReader = command.ExecuteReader(CommandBehavior.CloseConnection);
            return returnReader;
        }

        /// <summary>
        /// 执行存储过程
        /// </summary>
        /// <param name="storedProcName">存储过程名</param>
        /// <param name="parameters">存储过程参数</param>
        /// <param name="tableName">DataSet结果中的表名</param>
        /// <returns>DataSet</returns>
        public static DataSet RunProcedure(string storedProcName, IDataParameter[] parameters, string tableName)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                DataSet dataSet = new DataSet();
                connection.Open();
                OscarDataAdapter sqlDA = new OscarDataAdapter
                                             {
                                                 SelectCommand =
                                                     BuildQueryCommand(connection, storedProcName, parameters)
                                             };
                sqlDA.Fill(dataSet, tableName);
                connection.Close();
                return dataSet;
            }
        }

        public static DataSet RunProcedure(string storedProcName, IDataParameter[] parameters, string tableName,
                                           int Times)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                DataSet dataSet = new DataSet();
                connection.Open();
                OscarDataAdapter sqlDA = new OscarDataAdapter();
                sqlDA.SelectCommand = BuildQueryCommand(connection, storedProcName, parameters);
                sqlDA.SelectCommand.CommandTimeout = Times;
                sqlDA.Fill(dataSet, tableName);
                connection.Close();
                return dataSet;
            }
        }

        /// <summary>
        /// 构建 OscarCommand 对象(用来返回一个结果集，而不是一个整数值)
        /// </summary>
        /// <param name="connection">数据库连接</param>
        /// <param name="storedProcName">存储过程名</param>
        /// <param name="parameters">存储过程参数</param>
        /// <returns>OscarCommand</returns>
        private static OscarCommand BuildQueryCommand(OscarConnection connection, string storedProcName,
                                                      IDataParameter[] parameters)
        {
            OscarCommand command = new OscarCommand(storedProcName, connection);
            command.CommandType = CommandType.StoredProcedure;
            foreach (OscarParameter parameter in parameters)
            {
                if (parameter != null)
                {
                    // 检查未分配值的输出参数,将其分配以DBNull.Value.
                    if ((parameter.Direction == ParameterDirection.InputOutput ||
                         parameter.Direction == ParameterDirection.Input) &&
                        (parameter.Value == null))
                    {
                        parameter.Value = DBNull.Value;
                    }
                    command.Parameters.Add(parameter);
                }
            }

            return command;
        }

        /// <summary>
        /// 执行存储过程，返回影响的行数		
        /// </summary>
        /// <param name="storedProcName">存储过程名</param>
        /// <param name="parameters">存储过程参数</param>
        /// <param name="rowsAffected">影响的行数</param>
        /// <returns></returns>
        public static int RunProcedure(string storedProcName, IDataParameter[] parameters, out int rowsAffected)
        {
            using (OscarConnection connection = new OscarConnection(connectionString))
            {
                int result;
                connection.Open();
                OscarCommand command = BuildIntCommand(connection, storedProcName, parameters);
                rowsAffected = command.ExecuteNonQuery();
                result = (int) command.Parameters["ReturnValue"].Value;
                return result;
            }
        }

        /// <summary>
        /// 创建 OscarCommand 对象实例(用来返回一个整数值)	
        /// </summary>
        /// <param name="connection">连接串</param>
        /// <param name="storedProcName">存储过程名</param>
        /// <param name="parameters">存储过程参数</param>
        /// <returns>OscarCommand 对象实例</returns>
        private static OscarCommand BuildIntCommand(OscarConnection connection, string storedProcName,
                                                    IDataParameter[] parameters)
        {
            OscarCommand command = BuildQueryCommand(connection, storedProcName, parameters);
            command.Parameters.Add(new OscarParameter("ReturnValue",
                                                      OscarDbType.Int, 4, ParameterDirection.ReturnValue,
                                                      false, 0, 0, string.Empty, DataRowVersion.Default, null));
            return command;
        }

        #endregion

        #region 添加一个传连接字符串的简单执行sql语句 2009-2-4

        /// <summary>
        /// 执行SQL语句，返回影响的记录数
        /// </summary>
        /// <param name="SQLString">SQL语句</param>
        /// <param name="strConnectionString">连接字符串</param>
        /// <param name="cmdParms">SQL参数数</param>
        /// <returns>影响的记录数</returns>
        public static int ExecuteSql(string SQLString, string strConnectionString, params OscarParameter[] cmdParms)
        {
            using (OscarConnection connection = new OscarConnection(strConnectionString))
            {
                using (OscarCommand cmd = new OscarCommand())
                {
                    PrepareCommand(cmd, connection, null, SQLString, cmdParms);
                    int rows = cmd.ExecuteNonQuery();
                    cmd.Parameters.Clear();
                    return rows;
                }
            }
        }

        /// <summary>
        /// 执行查询语句，返回DataSet
        /// </summary>
        /// <param name="SQLString">查询语句</param>
        /// <param name="strConnectionString">连接字符串</param>
        /// <returns>DataSet</returns>
        public static DataSet Query(string SQLString, string strConnectionString)
        {
            using (OscarConnection connection = new OscarConnection(strConnectionString))
            {
                DataSet ds = new DataSet();
                try
                {
                    connection.Open();
                    OscarDataAdapter command = new OscarDataAdapter(SQLString, connection);
                    command.Fill(ds, "ds");
                }
                catch (OscarException ex)
                {
                    throw new Exception(ex.Message);
                }
                return ds;
            }
        }

        #endregion
    }
}